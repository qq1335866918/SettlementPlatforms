package com.tt1000.settlementplatform.bean.member;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TF_CONSUME_ORDER_RECORD".
*/
public class TfConsumeOrderRecordDao extends AbstractDao<TfConsumeOrderRecord, String> {

    public static final String TABLENAME = "TF_CONSUME_ORDER_RECORD";

    /**
     * Properties of entity TfConsumeOrderRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property COR_ID = new Property(0, String.class, "COR_ID", true, "COR_ID");
        public final static Property CREATETIME = new Property(1, String.class, "CREATETIME", false, "CREATETIME");
        public final static Property COR_AMOUNT = new Property(2, String.class, "COR_AMOUNT", false, "COR_AMOUNT");
        public final static Property MACHINE_NO = new Property(3, String.class, "MACHINE_NO", false, "MACHINE_NO");
        public final static Property COR_MONERY = new Property(4, String.class, "COR_MONERY", false, "COR_MONERY");
        public final static Property U_ID = new Property(5, String.class, "U_ID", false, "U_ID");
        public final static Property ISM_STATUS = new Property(6, String.class, "ISM_STATUS", false, "ISM_STATUS");
        public final static Property STORE_CODE = new Property(7, String.class, "STORE_CODE", false, "STORE_CODE");
        public final static Property CLIENT_CODE = new Property(8, String.class, "CLIENT_CODE", false, "CLIENT_CODE");
        public final static Property COR_TYPE = new Property(9, String.class, "COR_TYPE", false, "COR_TYPE");
        public final static Property COR_STATUS = new Property(10, String.class, "COR_STATUS", false, "COR_STATUS");
        public final static Property UPDATETIME = new Property(11, String.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property ADDR_ID = new Property(12, long.class, "ADDR_ID", false, "ADDR_ID");
    }


    public TfConsumeOrderRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TfConsumeOrderRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TF_CONSUME_ORDER_RECORD\" (" + //
                "\"COR_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: COR_ID
                "\"CREATETIME\" TEXT," + // 1: CREATETIME
                "\"COR_AMOUNT\" TEXT," + // 2: COR_AMOUNT
                "\"MACHINE_NO\" TEXT," + // 3: MACHINE_NO
                "\"COR_MONERY\" TEXT," + // 4: COR_MONERY
                "\"U_ID\" TEXT," + // 5: U_ID
                "\"ISM_STATUS\" TEXT," + // 6: ISM_STATUS
                "\"STORE_CODE\" TEXT," + // 7: STORE_CODE
                "\"CLIENT_CODE\" TEXT," + // 8: CLIENT_CODE
                "\"COR_TYPE\" TEXT," + // 9: COR_TYPE
                "\"COR_STATUS\" TEXT," + // 10: COR_STATUS
                "\"UPDATETIME\" TEXT," + // 11: UPDATETIME
                "\"ADDR_ID\" INTEGER NOT NULL );"); // 12: ADDR_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TF_CONSUME_ORDER_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TfConsumeOrderRecord entity) {
        stmt.clearBindings();
 
        String COR_ID = entity.getCOR_ID();
        if (COR_ID != null) {
            stmt.bindString(1, COR_ID);
        }
 
        String CREATETIME = entity.getCREATETIME();
        if (CREATETIME != null) {
            stmt.bindString(2, CREATETIME);
        }
 
        String COR_AMOUNT = entity.getCOR_AMOUNT();
        if (COR_AMOUNT != null) {
            stmt.bindString(3, COR_AMOUNT);
        }
 
        String MACHINE_NO = entity.getMACHINE_NO();
        if (MACHINE_NO != null) {
            stmt.bindString(4, MACHINE_NO);
        }
 
        String COR_MONERY = entity.getCOR_MONERY();
        if (COR_MONERY != null) {
            stmt.bindString(5, COR_MONERY);
        }
 
        String U_ID = entity.getU_ID();
        if (U_ID != null) {
            stmt.bindString(6, U_ID);
        }
 
        String ISM_STATUS = entity.getISM_STATUS();
        if (ISM_STATUS != null) {
            stmt.bindString(7, ISM_STATUS);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(8, STORE_CODE);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(9, CLIENT_CODE);
        }
 
        String COR_TYPE = entity.getCOR_TYPE();
        if (COR_TYPE != null) {
            stmt.bindString(10, COR_TYPE);
        }
 
        String COR_STATUS = entity.getCOR_STATUS();
        if (COR_STATUS != null) {
            stmt.bindString(11, COR_STATUS);
        }
 
        String UPDATETIME = entity.getUPDATETIME();
        if (UPDATETIME != null) {
            stmt.bindString(12, UPDATETIME);
        }
        stmt.bindLong(13, entity.getADDR_ID());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TfConsumeOrderRecord entity) {
        stmt.clearBindings();
 
        String COR_ID = entity.getCOR_ID();
        if (COR_ID != null) {
            stmt.bindString(1, COR_ID);
        }
 
        String CREATETIME = entity.getCREATETIME();
        if (CREATETIME != null) {
            stmt.bindString(2, CREATETIME);
        }
 
        String COR_AMOUNT = entity.getCOR_AMOUNT();
        if (COR_AMOUNT != null) {
            stmt.bindString(3, COR_AMOUNT);
        }
 
        String MACHINE_NO = entity.getMACHINE_NO();
        if (MACHINE_NO != null) {
            stmt.bindString(4, MACHINE_NO);
        }
 
        String COR_MONERY = entity.getCOR_MONERY();
        if (COR_MONERY != null) {
            stmt.bindString(5, COR_MONERY);
        }
 
        String U_ID = entity.getU_ID();
        if (U_ID != null) {
            stmt.bindString(6, U_ID);
        }
 
        String ISM_STATUS = entity.getISM_STATUS();
        if (ISM_STATUS != null) {
            stmt.bindString(7, ISM_STATUS);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(8, STORE_CODE);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(9, CLIENT_CODE);
        }
 
        String COR_TYPE = entity.getCOR_TYPE();
        if (COR_TYPE != null) {
            stmt.bindString(10, COR_TYPE);
        }
 
        String COR_STATUS = entity.getCOR_STATUS();
        if (COR_STATUS != null) {
            stmt.bindString(11, COR_STATUS);
        }
 
        String UPDATETIME = entity.getUPDATETIME();
        if (UPDATETIME != null) {
            stmt.bindString(12, UPDATETIME);
        }
        stmt.bindLong(13, entity.getADDR_ID());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TfConsumeOrderRecord readEntity(Cursor cursor, int offset) {
        TfConsumeOrderRecord entity = new TfConsumeOrderRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // COR_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CREATETIME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // COR_AMOUNT
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MACHINE_NO
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // COR_MONERY
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // U_ID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ISM_STATUS
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // STORE_CODE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CLIENT_CODE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // COR_TYPE
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // COR_STATUS
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UPDATETIME
            cursor.getLong(offset + 12) // ADDR_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TfConsumeOrderRecord entity, int offset) {
        entity.setCOR_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCREATETIME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCOR_AMOUNT(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMACHINE_NO(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCOR_MONERY(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setU_ID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setISM_STATUS(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSTORE_CODE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCLIENT_CODE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCOR_TYPE(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCOR_STATUS(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUPDATETIME(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setADDR_ID(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TfConsumeOrderRecord entity, long rowId) {
        return entity.getCOR_ID();
    }
    
    @Override
    public String getKey(TfConsumeOrderRecord entity) {
        if(entity != null) {
            return entity.getCOR_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TfConsumeOrderRecord entity) {
        return entity.getCOR_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
