package com.tt1000.settlementplatform.bean.member;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tf_mealtimes".
*/
public class TfMealTimesDao extends AbstractDao<TfMealTimes, String> {

    public static final String TABLENAME = "tf_mealtimes";

    /**
     * Properties of entity TfMealTimes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MT_ID = new Property(0, String.class, "MT_ID", true, "MT_ID");
        public final static Property MT_NAME = new Property(1, String.class, "MT_NAME", false, "MT_NAME");
        public final static Property STARTTIME = new Property(2, String.class, "STARTTIME", false, "STARTTIME");
        public final static Property ENDTIME = new Property(3, String.class, "ENDTIME", false, "ENDTIME");
        public final static Property MT_STATUS = new Property(4, String.class, "MT_STATUS", false, "MT_STATUS");
        public final static Property UPDATETIME = new Property(5, long.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property CLIENT_CODE = new Property(6, String.class, "CLIENT_CODE", false, "CLIENT_CODE");
        public final static Property STORE_CODE = new Property(7, String.class, "STORE_CODE", false, "STORE_CODE");
    }


    public TfMealTimesDao(DaoConfig config) {
        super(config);
    }
    
    public TfMealTimesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tf_mealtimes\" (" + //
                "\"MT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: MT_ID
                "\"MT_NAME\" TEXT," + // 1: MT_NAME
                "\"STARTTIME\" TEXT," + // 2: STARTTIME
                "\"ENDTIME\" TEXT," + // 3: ENDTIME
                "\"MT_STATUS\" TEXT," + // 4: MT_STATUS
                "\"UPDATETIME\" INTEGER NOT NULL ," + // 5: UPDATETIME
                "\"CLIENT_CODE\" TEXT," + // 6: CLIENT_CODE
                "\"STORE_CODE\" TEXT);"); // 7: STORE_CODE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tf_mealtimes\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TfMealTimes entity) {
        stmt.clearBindings();
 
        String MT_ID = entity.getMT_ID();
        if (MT_ID != null) {
            stmt.bindString(1, MT_ID);
        }
 
        String MT_NAME = entity.getMT_NAME();
        if (MT_NAME != null) {
            stmt.bindString(2, MT_NAME);
        }
 
        String STARTTIME = entity.getSTARTTIME();
        if (STARTTIME != null) {
            stmt.bindString(3, STARTTIME);
        }
 
        String ENDTIME = entity.getENDTIME();
        if (ENDTIME != null) {
            stmt.bindString(4, ENDTIME);
        }
 
        String MT_STATUS = entity.getMT_STATUS();
        if (MT_STATUS != null) {
            stmt.bindString(5, MT_STATUS);
        }
        stmt.bindLong(6, entity.getUPDATETIME());
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(7, CLIENT_CODE);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(8, STORE_CODE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TfMealTimes entity) {
        stmt.clearBindings();
 
        String MT_ID = entity.getMT_ID();
        if (MT_ID != null) {
            stmt.bindString(1, MT_ID);
        }
 
        String MT_NAME = entity.getMT_NAME();
        if (MT_NAME != null) {
            stmt.bindString(2, MT_NAME);
        }
 
        String STARTTIME = entity.getSTARTTIME();
        if (STARTTIME != null) {
            stmt.bindString(3, STARTTIME);
        }
 
        String ENDTIME = entity.getENDTIME();
        if (ENDTIME != null) {
            stmt.bindString(4, ENDTIME);
        }
 
        String MT_STATUS = entity.getMT_STATUS();
        if (MT_STATUS != null) {
            stmt.bindString(5, MT_STATUS);
        }
        stmt.bindLong(6, entity.getUPDATETIME());
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(7, CLIENT_CODE);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(8, STORE_CODE);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TfMealTimes readEntity(Cursor cursor, int offset) {
        TfMealTimes entity = new TfMealTimes( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // MT_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MT_NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // STARTTIME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ENDTIME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MT_STATUS
            cursor.getLong(offset + 5), // UPDATETIME
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CLIENT_CODE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // STORE_CODE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TfMealTimes entity, int offset) {
        entity.setMT_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMT_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSTARTTIME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setENDTIME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMT_STATUS(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUPDATETIME(cursor.getLong(offset + 5));
        entity.setCLIENT_CODE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSTORE_CODE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TfMealTimes entity, long rowId) {
        return entity.getMT_ID();
    }
    
    @Override
    public String getKey(TfMealTimes entity) {
        if(entity != null) {
            return entity.getMT_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TfMealTimes entity) {
        return entity.getMT_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
