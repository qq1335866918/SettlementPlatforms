package com.tt1000.settlementplatform.bean.member;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tf_memberinfo".
*/
public class TfMemberInfoDao extends AbstractDao<TfMemberInfo, String> {

    public static final String TABLENAME = "tf_memberinfo";

    /**
     * Properties of entity TfMemberInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MI_ID = new Property(0, String.class, "MI_ID", true, "MI_ID");
        public final static Property OPEN_ID = new Property(1, String.class, "OPEN_ID", false, "OPEN_ID");
        public final static Property MI_NO = new Property(2, String.class, "MI_NO", false, "MI_NO");
        public final static Property MI_NAME = new Property(3, String.class, "MI_NAME", false, "MI_NAME");
        public final static Property MI_PHONE = new Property(4, String.class, "MI_PHONE", false, "MI_PHONE");
        public final static Property MI_PAPERWORK_NO = new Property(5, String.class, "MI_PAPERWORK_NO", false, "MI_PAPERWORK_NO");
        public final static Property MI_ADDR = new Property(6, String.class, "MI_ADDR", false, "MI_ADDR");
        public final static Property MI_STATUS = new Property(7, String.class, "MI_STATUS", false, "MI_STATUS");
        public final static Property MI_TYPE = new Property(8, String.class, "MI_TYPE", false, "MI_TYPE");
        public final static Property MI_GRADE = new Property(9, String.class, "MI_GRADE", false, "MI_GRADE");
        public final static Property COMPANY_ID = new Property(10, String.class, "COMPANY_ID", false, "COMPANY_ID");
        public final static Property BRANCH_ID = new Property(11, String.class, "BRANCH_ID", false, "BRANCH_ID");
        public final static Property ISM_STATUS = new Property(12, String.class, "ISM_STATUS", false, "ISM_STATUS");
        public final static Property CREATETIME = new Property(13, long.class, "CREATETIME", false, "CREATETIME");
        public final static Property UPDATETIME = new Property(14, long.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property STORE_CODE = new Property(15, String.class, "STORE_CODE", false, "STORE_CODE");
        public final static Property CLIENT_CODE = new Property(16, String.class, "CLIENT_CODE", false, "CLIENT_CODE");
        public final static Property MI_PASSWORD = new Property(17, String.class, "MI_PASSWORD", false, "MI_PASSWORD");
        public final static Property MEMBER_IMG = new Property(18, String.class, "MEMBER_IMG", false, "MEMBER_IMG");
        public final static Property STATE = new Property(19, String.class, "STATE", false, "STATE");
        public final static Property MI_SEX = new Property(20, String.class, "MI_SEX", false, "MI_SEX");
        public final static Property MI_EMAIL = new Property(21, String.class, "MI_EMAIL", false, "MI_EMAIL");
        public final static Property MI_AGE = new Property(22, String.class, "MI_AGE", false, "MI_AGE");
        public final static Property MI_BIRTH = new Property(23, long.class, "MI_BIRTH", false, "MI_BIRTH");
    }


    public TfMemberInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TfMemberInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tf_memberinfo\" (" + //
                "\"MI_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: MI_ID
                "\"OPEN_ID\" TEXT," + // 1: OPEN_ID
                "\"MI_NO\" TEXT," + // 2: MI_NO
                "\"MI_NAME\" TEXT," + // 3: MI_NAME
                "\"MI_PHONE\" TEXT," + // 4: MI_PHONE
                "\"MI_PAPERWORK_NO\" TEXT," + // 5: MI_PAPERWORK_NO
                "\"MI_ADDR\" TEXT," + // 6: MI_ADDR
                "\"MI_STATUS\" TEXT," + // 7: MI_STATUS
                "\"MI_TYPE\" TEXT," + // 8: MI_TYPE
                "\"MI_GRADE\" TEXT," + // 9: MI_GRADE
                "\"COMPANY_ID\" TEXT," + // 10: COMPANY_ID
                "\"BRANCH_ID\" TEXT," + // 11: BRANCH_ID
                "\"ISM_STATUS\" TEXT," + // 12: ISM_STATUS
                "\"CREATETIME\" INTEGER NOT NULL ," + // 13: CREATETIME
                "\"UPDATETIME\" INTEGER NOT NULL ," + // 14: UPDATETIME
                "\"STORE_CODE\" TEXT," + // 15: STORE_CODE
                "\"CLIENT_CODE\" TEXT," + // 16: CLIENT_CODE
                "\"MI_PASSWORD\" TEXT," + // 17: MI_PASSWORD
                "\"MEMBER_IMG\" TEXT," + // 18: MEMBER_IMG
                "\"STATE\" TEXT," + // 19: STATE
                "\"MI_SEX\" TEXT," + // 20: MI_SEX
                "\"MI_EMAIL\" TEXT," + // 21: MI_EMAIL
                "\"MI_AGE\" TEXT," + // 22: MI_AGE
                "\"MI_BIRTH\" INTEGER NOT NULL );"); // 23: MI_BIRTH
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tf_memberinfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TfMemberInfo entity) {
        stmt.clearBindings();
 
        String MI_ID = entity.getMI_ID();
        if (MI_ID != null) {
            stmt.bindString(1, MI_ID);
        }
 
        String OPEN_ID = entity.getOPEN_ID();
        if (OPEN_ID != null) {
            stmt.bindString(2, OPEN_ID);
        }
 
        String MI_NO = entity.getMI_NO();
        if (MI_NO != null) {
            stmt.bindString(3, MI_NO);
        }
 
        String MI_NAME = entity.getMI_NAME();
        if (MI_NAME != null) {
            stmt.bindString(4, MI_NAME);
        }
 
        String MI_PHONE = entity.getMI_PHONE();
        if (MI_PHONE != null) {
            stmt.bindString(5, MI_PHONE);
        }
 
        String MI_PAPERWORK_NO = entity.getMI_PAPERWORK_NO();
        if (MI_PAPERWORK_NO != null) {
            stmt.bindString(6, MI_PAPERWORK_NO);
        }
 
        String MI_ADDR = entity.getMI_ADDR();
        if (MI_ADDR != null) {
            stmt.bindString(7, MI_ADDR);
        }
 
        String MI_STATUS = entity.getMI_STATUS();
        if (MI_STATUS != null) {
            stmt.bindString(8, MI_STATUS);
        }
 
        String MI_TYPE = entity.getMI_TYPE();
        if (MI_TYPE != null) {
            stmt.bindString(9, MI_TYPE);
        }
 
        String MI_GRADE = entity.getMI_GRADE();
        if (MI_GRADE != null) {
            stmt.bindString(10, MI_GRADE);
        }
 
        String COMPANY_ID = entity.getCOMPANY_ID();
        if (COMPANY_ID != null) {
            stmt.bindString(11, COMPANY_ID);
        }
 
        String BRANCH_ID = entity.getBRANCH_ID();
        if (BRANCH_ID != null) {
            stmt.bindString(12, BRANCH_ID);
        }
 
        String ISM_STATUS = entity.getISM_STATUS();
        if (ISM_STATUS != null) {
            stmt.bindString(13, ISM_STATUS);
        }
        stmt.bindLong(14, entity.getCREATETIME());
        stmt.bindLong(15, entity.getUPDATETIME());
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(16, STORE_CODE);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(17, CLIENT_CODE);
        }
 
        String MI_PASSWORD = entity.getMI_PASSWORD();
        if (MI_PASSWORD != null) {
            stmt.bindString(18, MI_PASSWORD);
        }
 
        String MEMBER_IMG = entity.getMEMBER_IMG();
        if (MEMBER_IMG != null) {
            stmt.bindString(19, MEMBER_IMG);
        }
 
        String STATE = entity.getSTATE();
        if (STATE != null) {
            stmt.bindString(20, STATE);
        }
 
        String MI_SEX = entity.getMI_SEX();
        if (MI_SEX != null) {
            stmt.bindString(21, MI_SEX);
        }
 
        String MI_EMAIL = entity.getMI_EMAIL();
        if (MI_EMAIL != null) {
            stmt.bindString(22, MI_EMAIL);
        }
 
        String MI_AGE = entity.getMI_AGE();
        if (MI_AGE != null) {
            stmt.bindString(23, MI_AGE);
        }
        stmt.bindLong(24, entity.getMI_BIRTH());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TfMemberInfo entity) {
        stmt.clearBindings();
 
        String MI_ID = entity.getMI_ID();
        if (MI_ID != null) {
            stmt.bindString(1, MI_ID);
        }
 
        String OPEN_ID = entity.getOPEN_ID();
        if (OPEN_ID != null) {
            stmt.bindString(2, OPEN_ID);
        }
 
        String MI_NO = entity.getMI_NO();
        if (MI_NO != null) {
            stmt.bindString(3, MI_NO);
        }
 
        String MI_NAME = entity.getMI_NAME();
        if (MI_NAME != null) {
            stmt.bindString(4, MI_NAME);
        }
 
        String MI_PHONE = entity.getMI_PHONE();
        if (MI_PHONE != null) {
            stmt.bindString(5, MI_PHONE);
        }
 
        String MI_PAPERWORK_NO = entity.getMI_PAPERWORK_NO();
        if (MI_PAPERWORK_NO != null) {
            stmt.bindString(6, MI_PAPERWORK_NO);
        }
 
        String MI_ADDR = entity.getMI_ADDR();
        if (MI_ADDR != null) {
            stmt.bindString(7, MI_ADDR);
        }
 
        String MI_STATUS = entity.getMI_STATUS();
        if (MI_STATUS != null) {
            stmt.bindString(8, MI_STATUS);
        }
 
        String MI_TYPE = entity.getMI_TYPE();
        if (MI_TYPE != null) {
            stmt.bindString(9, MI_TYPE);
        }
 
        String MI_GRADE = entity.getMI_GRADE();
        if (MI_GRADE != null) {
            stmt.bindString(10, MI_GRADE);
        }
 
        String COMPANY_ID = entity.getCOMPANY_ID();
        if (COMPANY_ID != null) {
            stmt.bindString(11, COMPANY_ID);
        }
 
        String BRANCH_ID = entity.getBRANCH_ID();
        if (BRANCH_ID != null) {
            stmt.bindString(12, BRANCH_ID);
        }
 
        String ISM_STATUS = entity.getISM_STATUS();
        if (ISM_STATUS != null) {
            stmt.bindString(13, ISM_STATUS);
        }
        stmt.bindLong(14, entity.getCREATETIME());
        stmt.bindLong(15, entity.getUPDATETIME());
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(16, STORE_CODE);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(17, CLIENT_CODE);
        }
 
        String MI_PASSWORD = entity.getMI_PASSWORD();
        if (MI_PASSWORD != null) {
            stmt.bindString(18, MI_PASSWORD);
        }
 
        String MEMBER_IMG = entity.getMEMBER_IMG();
        if (MEMBER_IMG != null) {
            stmt.bindString(19, MEMBER_IMG);
        }
 
        String STATE = entity.getSTATE();
        if (STATE != null) {
            stmt.bindString(20, STATE);
        }
 
        String MI_SEX = entity.getMI_SEX();
        if (MI_SEX != null) {
            stmt.bindString(21, MI_SEX);
        }
 
        String MI_EMAIL = entity.getMI_EMAIL();
        if (MI_EMAIL != null) {
            stmt.bindString(22, MI_EMAIL);
        }
 
        String MI_AGE = entity.getMI_AGE();
        if (MI_AGE != null) {
            stmt.bindString(23, MI_AGE);
        }
        stmt.bindLong(24, entity.getMI_BIRTH());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TfMemberInfo readEntity(Cursor cursor, int offset) {
        TfMemberInfo entity = new TfMemberInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // MI_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // OPEN_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MI_NO
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MI_NAME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MI_PHONE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // MI_PAPERWORK_NO
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // MI_ADDR
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // MI_STATUS
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // MI_TYPE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // MI_GRADE
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // COMPANY_ID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // BRANCH_ID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ISM_STATUS
            cursor.getLong(offset + 13), // CREATETIME
            cursor.getLong(offset + 14), // UPDATETIME
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // STORE_CODE
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CLIENT_CODE
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // MI_PASSWORD
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // MEMBER_IMG
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // STATE
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // MI_SEX
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // MI_EMAIL
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // MI_AGE
            cursor.getLong(offset + 23) // MI_BIRTH
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TfMemberInfo entity, int offset) {
        entity.setMI_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOPEN_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMI_NO(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMI_NAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMI_PHONE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMI_PAPERWORK_NO(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMI_ADDR(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMI_STATUS(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMI_TYPE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMI_GRADE(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCOMPANY_ID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBRANCH_ID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setISM_STATUS(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCREATETIME(cursor.getLong(offset + 13));
        entity.setUPDATETIME(cursor.getLong(offset + 14));
        entity.setSTORE_CODE(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCLIENT_CODE(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMI_PASSWORD(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMEMBER_IMG(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSTATE(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMI_SEX(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMI_EMAIL(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setMI_AGE(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMI_BIRTH(cursor.getLong(offset + 23));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TfMemberInfo entity, long rowId) {
        return entity.getMI_ID();
    }
    
    @Override
    public String getKey(TfMemberInfo entity) {
        if(entity != null) {
            return entity.getMI_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TfMemberInfo entity) {
        return entity.getMI_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
