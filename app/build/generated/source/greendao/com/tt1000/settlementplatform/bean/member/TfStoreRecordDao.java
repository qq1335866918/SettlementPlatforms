package com.tt1000.settlementplatform.bean.member;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tf_store_record".
*/
public class TfStoreRecordDao extends AbstractDao<TfStoreRecord, String> {

    public static final String TABLENAME = "tf_store_record";

    /**
     * Properties of entity TfStoreRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property STORE_ID = new Property(0, String.class, "STORE_ID", true, "STORE_ID");
        public final static Property STORE_NAME = new Property(1, String.class, "STORE_NAME", false, "STORE__NAME");
        public final static Property STORE_ADDR = new Property(2, String.class, "STORE_ADDR", false, "STORE__ADDR");
        public final static Property STORE_STATUS = new Property(3, String.class, "STORE_STATUS", false, "STORE__STATUS");
        public final static Property STORE_CODE = new Property(4, String.class, "STORE_CODE", false, "STORE__CODE");
        public final static Property CREATETIME = new Property(5, long.class, "CREATETIME", false, "CREATETIME");
        public final static Property UPDATETIME = new Property(6, long.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property CLIENT_CODE = new Property(7, String.class, "CLIENT_CODE", false, "CLIENT__CODE");
        public final static Property STORE_DUTY_PERSON = new Property(8, String.class, "STORE_DUTY_PERSON", false, "STORE__DUTY__PERSON");
        public final static Property STORE_DUTY_PHONE = new Property(9, String.class, "STORE_DUTY_PHONE", false, "STORE__DUTY__PHONE");
        public final static Property STORE_IMG = new Property(10, String.class, "STORE_IMG", false, "STORE__IMG");
        public final static Property SYN_STATUS = new Property(11, String.class, "SYN_STATUS", false, "SYN__STATUS");
        public final static Property VAILD_TIME = new Property(12, String.class, "VAILD_TIME", false, "VAILD__TIME");
        public final static Property APPID = new Property(13, String.class, "APPID", false, "APPID");
        public final static Property SECRET = new Property(14, String.class, "SECRET", false, "SECRET");
        public final static Property SMS = new Property(15, String.class, "SMS", false, "SMS");
    }


    public TfStoreRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TfStoreRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tf_store_record\" (" + //
                "\"STORE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: STORE_ID
                "\"STORE__NAME\" TEXT," + // 1: STORE_NAME
                "\"STORE__ADDR\" TEXT," + // 2: STORE_ADDR
                "\"STORE__STATUS\" TEXT," + // 3: STORE_STATUS
                "\"STORE__CODE\" TEXT," + // 4: STORE_CODE
                "\"CREATETIME\" INTEGER NOT NULL ," + // 5: CREATETIME
                "\"UPDATETIME\" INTEGER NOT NULL ," + // 6: UPDATETIME
                "\"CLIENT__CODE\" TEXT," + // 7: CLIENT_CODE
                "\"STORE__DUTY__PERSON\" TEXT," + // 8: STORE_DUTY_PERSON
                "\"STORE__DUTY__PHONE\" TEXT," + // 9: STORE_DUTY_PHONE
                "\"STORE__IMG\" TEXT," + // 10: STORE_IMG
                "\"SYN__STATUS\" TEXT," + // 11: SYN_STATUS
                "\"VAILD__TIME\" TEXT," + // 12: VAILD_TIME
                "\"APPID\" TEXT," + // 13: APPID
                "\"SECRET\" TEXT," + // 14: SECRET
                "\"SMS\" TEXT);"); // 15: SMS
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tf_store_record\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TfStoreRecord entity) {
        stmt.clearBindings();
 
        String STORE_ID = entity.getSTORE_ID();
        if (STORE_ID != null) {
            stmt.bindString(1, STORE_ID);
        }
 
        String STORE_NAME = entity.getSTORE_NAME();
        if (STORE_NAME != null) {
            stmt.bindString(2, STORE_NAME);
        }
 
        String STORE_ADDR = entity.getSTORE_ADDR();
        if (STORE_ADDR != null) {
            stmt.bindString(3, STORE_ADDR);
        }
 
        String STORE_STATUS = entity.getSTORE_STATUS();
        if (STORE_STATUS != null) {
            stmt.bindString(4, STORE_STATUS);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(5, STORE_CODE);
        }
        stmt.bindLong(6, entity.getCREATETIME());
        stmt.bindLong(7, entity.getUPDATETIME());
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(8, CLIENT_CODE);
        }
 
        String STORE_DUTY_PERSON = entity.getSTORE_DUTY_PERSON();
        if (STORE_DUTY_PERSON != null) {
            stmt.bindString(9, STORE_DUTY_PERSON);
        }
 
        String STORE_DUTY_PHONE = entity.getSTORE_DUTY_PHONE();
        if (STORE_DUTY_PHONE != null) {
            stmt.bindString(10, STORE_DUTY_PHONE);
        }
 
        String STORE_IMG = entity.getSTORE_IMG();
        if (STORE_IMG != null) {
            stmt.bindString(11, STORE_IMG);
        }
 
        String SYN_STATUS = entity.getSYN_STATUS();
        if (SYN_STATUS != null) {
            stmt.bindString(12, SYN_STATUS);
        }
 
        String VAILD_TIME = entity.getVAILD_TIME();
        if (VAILD_TIME != null) {
            stmt.bindString(13, VAILD_TIME);
        }
 
        String APPID = entity.getAPPID();
        if (APPID != null) {
            stmt.bindString(14, APPID);
        }
 
        String SECRET = entity.getSECRET();
        if (SECRET != null) {
            stmt.bindString(15, SECRET);
        }
 
        String SMS = entity.getSMS();
        if (SMS != null) {
            stmt.bindString(16, SMS);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TfStoreRecord entity) {
        stmt.clearBindings();
 
        String STORE_ID = entity.getSTORE_ID();
        if (STORE_ID != null) {
            stmt.bindString(1, STORE_ID);
        }
 
        String STORE_NAME = entity.getSTORE_NAME();
        if (STORE_NAME != null) {
            stmt.bindString(2, STORE_NAME);
        }
 
        String STORE_ADDR = entity.getSTORE_ADDR();
        if (STORE_ADDR != null) {
            stmt.bindString(3, STORE_ADDR);
        }
 
        String STORE_STATUS = entity.getSTORE_STATUS();
        if (STORE_STATUS != null) {
            stmt.bindString(4, STORE_STATUS);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(5, STORE_CODE);
        }
        stmt.bindLong(6, entity.getCREATETIME());
        stmt.bindLong(7, entity.getUPDATETIME());
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(8, CLIENT_CODE);
        }
 
        String STORE_DUTY_PERSON = entity.getSTORE_DUTY_PERSON();
        if (STORE_DUTY_PERSON != null) {
            stmt.bindString(9, STORE_DUTY_PERSON);
        }
 
        String STORE_DUTY_PHONE = entity.getSTORE_DUTY_PHONE();
        if (STORE_DUTY_PHONE != null) {
            stmt.bindString(10, STORE_DUTY_PHONE);
        }
 
        String STORE_IMG = entity.getSTORE_IMG();
        if (STORE_IMG != null) {
            stmt.bindString(11, STORE_IMG);
        }
 
        String SYN_STATUS = entity.getSYN_STATUS();
        if (SYN_STATUS != null) {
            stmt.bindString(12, SYN_STATUS);
        }
 
        String VAILD_TIME = entity.getVAILD_TIME();
        if (VAILD_TIME != null) {
            stmt.bindString(13, VAILD_TIME);
        }
 
        String APPID = entity.getAPPID();
        if (APPID != null) {
            stmt.bindString(14, APPID);
        }
 
        String SECRET = entity.getSECRET();
        if (SECRET != null) {
            stmt.bindString(15, SECRET);
        }
 
        String SMS = entity.getSMS();
        if (SMS != null) {
            stmt.bindString(16, SMS);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TfStoreRecord readEntity(Cursor cursor, int offset) {
        TfStoreRecord entity = new TfStoreRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // STORE_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // STORE_NAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // STORE_ADDR
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // STORE_STATUS
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // STORE_CODE
            cursor.getLong(offset + 5), // CREATETIME
            cursor.getLong(offset + 6), // UPDATETIME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CLIENT_CODE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // STORE_DUTY_PERSON
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // STORE_DUTY_PHONE
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // STORE_IMG
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // SYN_STATUS
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // VAILD_TIME
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // APPID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // SECRET
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // SMS
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TfStoreRecord entity, int offset) {
        entity.setSTORE_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSTORE_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSTORE_ADDR(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSTORE_STATUS(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSTORE_CODE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCREATETIME(cursor.getLong(offset + 5));
        entity.setUPDATETIME(cursor.getLong(offset + 6));
        entity.setCLIENT_CODE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSTORE_DUTY_PERSON(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSTORE_DUTY_PHONE(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSTORE_IMG(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSYN_STATUS(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVAILD_TIME(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAPPID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSECRET(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSMS(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TfStoreRecord entity, long rowId) {
        return entity.getSTORE_ID();
    }
    
    @Override
    public String getKey(TfStoreRecord entity) {
        if(entity != null) {
            return entity.getSTORE_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TfStoreRecord entity) {
        return entity.getSTORE_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
