package com.tt1000.settlementplatform.bean.member;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "commodity_type_record".
*/
public class CommodityTypeRecordDao extends AbstractDao<CommodityTypeRecord, String> {

    public static final String TABLENAME = "commodity_type_record";

    /**
     * Properties of entity CommodityTypeRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SEQNO = new Property(0, String.class, "SEQNO", true, "SEQNO");
        public final static Property TYPE_NAME = new Property(1, String.class, "TYPE_NAME", false, "TYPE_NAME");
        public final static Property CREATETIME = new Property(2, long.class, "CREATETIME", false, "CREATETIME");
        public final static Property UPDATETIME = new Property(3, long.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property P_ID = new Property(4, String.class, "P_ID", false, "P_ID");
        public final static Property CLIENT_CODE = new Property(5, String.class, "CLIENT_CODE", false, "CLIENT_CODE");
        public final static Property STORE_CODE = new Property(6, String.class, "STORE_CODE", false, "STORE_CODE");
        public final static Property STATUS = new Property(7, String.class, "STATUS", false, "STATUS");
        public final static Property SORT = new Property(8, String.class, "SORT", false, "SORT");
        public final static Property T_ID = new Property(9, String.class, "T_ID", false, "T_ID");
    }


    public CommodityTypeRecordDao(DaoConfig config) {
        super(config);
    }
    
    public CommodityTypeRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"commodity_type_record\" (" + //
                "\"SEQNO\" TEXT PRIMARY KEY NOT NULL ," + // 0: SEQNO
                "\"TYPE_NAME\" TEXT," + // 1: TYPE_NAME
                "\"CREATETIME\" INTEGER NOT NULL ," + // 2: CREATETIME
                "\"UPDATETIME\" INTEGER NOT NULL ," + // 3: UPDATETIME
                "\"P_ID\" TEXT," + // 4: P_ID
                "\"CLIENT_CODE\" TEXT," + // 5: CLIENT_CODE
                "\"STORE_CODE\" TEXT," + // 6: STORE_CODE
                "\"STATUS\" TEXT," + // 7: STATUS
                "\"SORT\" TEXT," + // 8: SORT
                "\"T_ID\" TEXT);"); // 9: T_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"commodity_type_record\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommodityTypeRecord entity) {
        stmt.clearBindings();
 
        String SEQNO = entity.getSEQNO();
        if (SEQNO != null) {
            stmt.bindString(1, SEQNO);
        }
 
        String TYPE_NAME = entity.getTYPE_NAME();
        if (TYPE_NAME != null) {
            stmt.bindString(2, TYPE_NAME);
        }
        stmt.bindLong(3, entity.getCREATETIME());
        stmt.bindLong(4, entity.getUPDATETIME());
 
        String P_ID = entity.getP_ID();
        if (P_ID != null) {
            stmt.bindString(5, P_ID);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(6, CLIENT_CODE);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(7, STORE_CODE);
        }
 
        String STATUS = entity.getSTATUS();
        if (STATUS != null) {
            stmt.bindString(8, STATUS);
        }
 
        String SORT = entity.getSORT();
        if (SORT != null) {
            stmt.bindString(9, SORT);
        }
 
        String T_ID = entity.getT_ID();
        if (T_ID != null) {
            stmt.bindString(10, T_ID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommodityTypeRecord entity) {
        stmt.clearBindings();
 
        String SEQNO = entity.getSEQNO();
        if (SEQNO != null) {
            stmt.bindString(1, SEQNO);
        }
 
        String TYPE_NAME = entity.getTYPE_NAME();
        if (TYPE_NAME != null) {
            stmt.bindString(2, TYPE_NAME);
        }
        stmt.bindLong(3, entity.getCREATETIME());
        stmt.bindLong(4, entity.getUPDATETIME());
 
        String P_ID = entity.getP_ID();
        if (P_ID != null) {
            stmt.bindString(5, P_ID);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(6, CLIENT_CODE);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(7, STORE_CODE);
        }
 
        String STATUS = entity.getSTATUS();
        if (STATUS != null) {
            stmt.bindString(8, STATUS);
        }
 
        String SORT = entity.getSORT();
        if (SORT != null) {
            stmt.bindString(9, SORT);
        }
 
        String T_ID = entity.getT_ID();
        if (T_ID != null) {
            stmt.bindString(10, T_ID);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CommodityTypeRecord readEntity(Cursor cursor, int offset) {
        CommodityTypeRecord entity = new CommodityTypeRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // SEQNO
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TYPE_NAME
            cursor.getLong(offset + 2), // CREATETIME
            cursor.getLong(offset + 3), // UPDATETIME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // P_ID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CLIENT_CODE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // STORE_CODE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // STATUS
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SORT
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // T_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommodityTypeRecord entity, int offset) {
        entity.setSEQNO(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTYPE_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCREATETIME(cursor.getLong(offset + 2));
        entity.setUPDATETIME(cursor.getLong(offset + 3));
        entity.setP_ID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCLIENT_CODE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSTORE_CODE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSTATUS(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSORT(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setT_ID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CommodityTypeRecord entity, long rowId) {
        return entity.getSEQNO();
    }
    
    @Override
    public String getKey(CommodityTypeRecord entity) {
        if(entity != null) {
            return entity.getSEQNO();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommodityTypeRecord entity) {
        return entity.getSEQNO() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
