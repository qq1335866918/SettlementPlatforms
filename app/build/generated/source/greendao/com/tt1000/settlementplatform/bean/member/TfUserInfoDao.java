package com.tt1000.settlementplatform.bean.member;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tf_userinfo".
*/
public class TfUserInfoDao extends AbstractDao<TfUserInfo, String> {

    public static final String TABLENAME = "tf_userinfo";

    /**
     * Properties of entity TfUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property U_ID = new Property(0, String.class, "U_ID", true, "U_ID");
        public final static Property UNO = new Property(1, String.class, "UNO", false, "UNO");
        public final static Property UNAME = new Property(2, String.class, "UNAME", false, "UNAME");
        public final static Property UPHONE = new Property(3, String.class, "UPHONE", false, "UPHONE");
        public final static Property UADDR = new Property(4, String.class, "UADDR", false, "UADDR");
        public final static Property UPAPERWORK_NO = new Property(5, String.class, "UPAPERWORK_NO", false, "UPAPERWORK_NO");
        public final static Property USEX = new Property(6, String.class, "USEX", false, "USEX");
        public final static Property CREATETIME = new Property(7, long.class, "CREATETIME", false, "CREATETIME");
        public final static Property UPDATETIME = new Property(8, long.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property USTATUS = new Property(9, String.class, "USTATUS", false, "USTATUS");
        public final static Property ULOGINNO = new Property(10, String.class, "ULOGINNO", false, "ULOGINNO");
        public final static Property UPASSWORD = new Property(11, String.class, "UPASSWORD", false, "UPASSWORD");
        public final static Property UTYPE = new Property(12, String.class, "UTYPE", false, "UTYPE");
        public final static Property STORE_CODE = new Property(13, String.class, "STORE_CODE", false, "STORE_CODE");
        public final static Property CLIENT_CODE = new Property(14, String.class, "CLIENT_CODE", false, "CLIENT_CODE");
    }


    public TfUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TfUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tf_userinfo\" (" + //
                "\"U_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: U_ID
                "\"UNO\" TEXT," + // 1: UNO
                "\"UNAME\" TEXT," + // 2: UNAME
                "\"UPHONE\" TEXT," + // 3: UPHONE
                "\"UADDR\" TEXT," + // 4: UADDR
                "\"UPAPERWORK_NO\" TEXT," + // 5: UPAPERWORK_NO
                "\"USEX\" TEXT," + // 6: USEX
                "\"CREATETIME\" INTEGER NOT NULL ," + // 7: CREATETIME
                "\"UPDATETIME\" INTEGER NOT NULL ," + // 8: UPDATETIME
                "\"USTATUS\" TEXT," + // 9: USTATUS
                "\"ULOGINNO\" TEXT," + // 10: ULOGINNO
                "\"UPASSWORD\" TEXT," + // 11: UPASSWORD
                "\"UTYPE\" TEXT," + // 12: UTYPE
                "\"STORE_CODE\" TEXT," + // 13: STORE_CODE
                "\"CLIENT_CODE\" TEXT);"); // 14: CLIENT_CODE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tf_userinfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TfUserInfo entity) {
        stmt.clearBindings();
 
        String U_ID = entity.getU_ID();
        if (U_ID != null) {
            stmt.bindString(1, U_ID);
        }
 
        String UNO = entity.getUNO();
        if (UNO != null) {
            stmt.bindString(2, UNO);
        }
 
        String UNAME = entity.getUNAME();
        if (UNAME != null) {
            stmt.bindString(3, UNAME);
        }
 
        String UPHONE = entity.getUPHONE();
        if (UPHONE != null) {
            stmt.bindString(4, UPHONE);
        }
 
        String UADDR = entity.getUADDR();
        if (UADDR != null) {
            stmt.bindString(5, UADDR);
        }
 
        String UPAPERWORK_NO = entity.getUPAPERWORK_NO();
        if (UPAPERWORK_NO != null) {
            stmt.bindString(6, UPAPERWORK_NO);
        }
 
        String USEX = entity.getUSEX();
        if (USEX != null) {
            stmt.bindString(7, USEX);
        }
        stmt.bindLong(8, entity.getCREATETIME());
        stmt.bindLong(9, entity.getUPDATETIME());
 
        String USTATUS = entity.getUSTATUS();
        if (USTATUS != null) {
            stmt.bindString(10, USTATUS);
        }
 
        String ULOGINNO = entity.getULOGINNO();
        if (ULOGINNO != null) {
            stmt.bindString(11, ULOGINNO);
        }
 
        String UPASSWORD = entity.getUPASSWORD();
        if (UPASSWORD != null) {
            stmt.bindString(12, UPASSWORD);
        }
 
        String UTYPE = entity.getUTYPE();
        if (UTYPE != null) {
            stmt.bindString(13, UTYPE);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(14, STORE_CODE);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(15, CLIENT_CODE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TfUserInfo entity) {
        stmt.clearBindings();
 
        String U_ID = entity.getU_ID();
        if (U_ID != null) {
            stmt.bindString(1, U_ID);
        }
 
        String UNO = entity.getUNO();
        if (UNO != null) {
            stmt.bindString(2, UNO);
        }
 
        String UNAME = entity.getUNAME();
        if (UNAME != null) {
            stmt.bindString(3, UNAME);
        }
 
        String UPHONE = entity.getUPHONE();
        if (UPHONE != null) {
            stmt.bindString(4, UPHONE);
        }
 
        String UADDR = entity.getUADDR();
        if (UADDR != null) {
            stmt.bindString(5, UADDR);
        }
 
        String UPAPERWORK_NO = entity.getUPAPERWORK_NO();
        if (UPAPERWORK_NO != null) {
            stmt.bindString(6, UPAPERWORK_NO);
        }
 
        String USEX = entity.getUSEX();
        if (USEX != null) {
            stmt.bindString(7, USEX);
        }
        stmt.bindLong(8, entity.getCREATETIME());
        stmt.bindLong(9, entity.getUPDATETIME());
 
        String USTATUS = entity.getUSTATUS();
        if (USTATUS != null) {
            stmt.bindString(10, USTATUS);
        }
 
        String ULOGINNO = entity.getULOGINNO();
        if (ULOGINNO != null) {
            stmt.bindString(11, ULOGINNO);
        }
 
        String UPASSWORD = entity.getUPASSWORD();
        if (UPASSWORD != null) {
            stmt.bindString(12, UPASSWORD);
        }
 
        String UTYPE = entity.getUTYPE();
        if (UTYPE != null) {
            stmt.bindString(13, UTYPE);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(14, STORE_CODE);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(15, CLIENT_CODE);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TfUserInfo readEntity(Cursor cursor, int offset) {
        TfUserInfo entity = new TfUserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // U_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UNO
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UNAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UPHONE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UADDR
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UPAPERWORK_NO
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // USEX
            cursor.getLong(offset + 7), // CREATETIME
            cursor.getLong(offset + 8), // UPDATETIME
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // USTATUS
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ULOGINNO
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UPASSWORD
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // UTYPE
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // STORE_CODE
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // CLIENT_CODE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TfUserInfo entity, int offset) {
        entity.setU_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUNO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUNAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUPHONE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUADDR(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUPAPERWORK_NO(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUSEX(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCREATETIME(cursor.getLong(offset + 7));
        entity.setUPDATETIME(cursor.getLong(offset + 8));
        entity.setUSTATUS(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setULOGINNO(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUPASSWORD(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUTYPE(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSTORE_CODE(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCLIENT_CODE(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TfUserInfo entity, long rowId) {
        return entity.getU_ID();
    }
    
    @Override
    public String getKey(TfUserInfo entity) {
        if(entity != null) {
            return entity.getU_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TfUserInfo entity) {
        return entity.getU_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
