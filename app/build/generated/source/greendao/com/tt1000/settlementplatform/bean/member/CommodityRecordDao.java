package com.tt1000.settlementplatform.bean.member;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMODITY_RECORD".
*/
public class CommodityRecordDao extends AbstractDao<CommodityRecord, Long> {

    public static final String TABLENAME = "COMMODITY_RECORD";

    /**
     * Properties of entity CommodityRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CI_ID = new Property(0, long.class, "CI_ID", true, "CI_ID");
        public final static Property CI_NO = new Property(1, String.class, "CI_NO", false, "CI_NO");
        public final static Property CI_NAME = new Property(2, String.class, "CI_NAME", false, "CI_NAME");
        public final static Property CI_NUMBER = new Property(3, String.class, "CI_NUMBER", false, "CI_NUMBER");
        public final static Property CI_PRICE = new Property(4, String.class, "CI_PRICE", false, "CI_PRICE");
        public final static Property CI_NUM = new Property(5, String.class, "CI_NUM", false, "CI_NUM");
        public final static Property CI_IMPORTPRICE = new Property(6, String.class, "CI_IMPORTPRICE", false, "CI_IMPORTPRICE");
        public final static Property CI_SALEPRICE = new Property(7, String.class, "CI_SALEPRICE", false, "CI_SALEPRICE");
        public final static Property CI_MEMBERPRICE = new Property(8, String.class, "CI_MEMBERPRICE", false, "CI_MEMBERPRICE");
        public final static Property CI_UNIT = new Property(9, String.class, "CI_UNIT", false, "CI_UNIT");
        public final static Property CI_VOLUM = new Property(10, String.class, "CI_VOLUM", false, "CI_VOLUM");
        public final static Property CI_DISCOUNT = new Property(11, String.class, "CI_DISCOUNT", false, "CI_DISCOUNT");
        public final static Property CI_REMARKS = new Property(12, String.class, "CI_REMARKS", false, "CI_REMARKS");
        public final static Property CREATETIME = new Property(13, long.class, "CREATETIME", false, "CREATETIME");
        public final static Property UPDATETIME = new Property(14, long.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property U_ID = new Property(15, String.class, "U_ID", false, "U_ID");
        public final static Property USE_STATUS = new Property(16, String.class, "USE_STATUS", false, "USE_STATUS");
        public final static Property CT_ID = new Property(17, String.class, "CT_ID", false, "CT_ID");
        public final static Property CI_SPELL = new Property(18, String.class, "CI_SPELL", false, "CI_SPELL");
        public final static Property CLIENT_CODE = new Property(19, String.class, "CLIENT_CODE", false, "CLIENT_CODE");
        public final static Property STORE_CODE = new Property(20, String.class, "STORE_CODE", false, "STORE_CODE");
        public final static Property CI_IMG = new Property(21, String.class, "CI_IMG", false, "CI_IMG");
        public final static Property CI_IMPPRICE1 = new Property(22, String.class, "CI_IMPPRICE1", false, "CI_IMPPRICE1");
        public final static Property CI_IMPPRICE2 = new Property(23, String.class, "CI_IMPPRICE2", false, "CI_IMPPRICE2");
        public final static Property CI_IMPPRICE3 = new Property(24, String.class, "CI_IMPPRICE3", false, "CI_IMPPRICE3");
        public final static Property CI_MINPRICE = new Property(25, String.class, "CI_MINPRICE", false, "CI_MINPRICE");
        public final static Property CI_CONENT = new Property(26, String.class, "CI_CONENT", false, "CI_CONENT");
        public final static Property UU_ID = new Property(27, String.class, "UU_ID", false, "UU_ID");
    }


    public CommodityRecordDao(DaoConfig config) {
        super(config);
    }
    
    public CommodityRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMODITY_RECORD\" (" + //
                "\"CI_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: CI_ID
                "\"CI_NO\" TEXT," + // 1: CI_NO
                "\"CI_NAME\" TEXT," + // 2: CI_NAME
                "\"CI_NUMBER\" TEXT," + // 3: CI_NUMBER
                "\"CI_PRICE\" TEXT," + // 4: CI_PRICE
                "\"CI_NUM\" TEXT," + // 5: CI_NUM
                "\"CI_IMPORTPRICE\" TEXT," + // 6: CI_IMPORTPRICE
                "\"CI_SALEPRICE\" TEXT," + // 7: CI_SALEPRICE
                "\"CI_MEMBERPRICE\" TEXT," + // 8: CI_MEMBERPRICE
                "\"CI_UNIT\" TEXT," + // 9: CI_UNIT
                "\"CI_VOLUM\" TEXT," + // 10: CI_VOLUM
                "\"CI_DISCOUNT\" TEXT," + // 11: CI_DISCOUNT
                "\"CI_REMARKS\" TEXT," + // 12: CI_REMARKS
                "\"CREATETIME\" INTEGER NOT NULL ," + // 13: CREATETIME
                "\"UPDATETIME\" INTEGER NOT NULL ," + // 14: UPDATETIME
                "\"U_ID\" TEXT," + // 15: U_ID
                "\"USE_STATUS\" TEXT," + // 16: USE_STATUS
                "\"CT_ID\" TEXT," + // 17: CT_ID
                "\"CI_SPELL\" TEXT," + // 18: CI_SPELL
                "\"CLIENT_CODE\" TEXT," + // 19: CLIENT_CODE
                "\"STORE_CODE\" TEXT," + // 20: STORE_CODE
                "\"CI_IMG\" TEXT," + // 21: CI_IMG
                "\"CI_IMPPRICE1\" TEXT," + // 22: CI_IMPPRICE1
                "\"CI_IMPPRICE2\" TEXT," + // 23: CI_IMPPRICE2
                "\"CI_IMPPRICE3\" TEXT," + // 24: CI_IMPPRICE3
                "\"CI_MINPRICE\" TEXT," + // 25: CI_MINPRICE
                "\"CI_CONENT\" TEXT," + // 26: CI_CONENT
                "\"UU_ID\" TEXT);"); // 27: UU_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMODITY_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommodityRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCI_ID());
 
        String CI_NO = entity.getCI_NO();
        if (CI_NO != null) {
            stmt.bindString(2, CI_NO);
        }
 
        String CI_NAME = entity.getCI_NAME();
        if (CI_NAME != null) {
            stmt.bindString(3, CI_NAME);
        }
 
        String CI_NUMBER = entity.getCI_NUMBER();
        if (CI_NUMBER != null) {
            stmt.bindString(4, CI_NUMBER);
        }
 
        String CI_PRICE = entity.getCI_PRICE();
        if (CI_PRICE != null) {
            stmt.bindString(5, CI_PRICE);
        }
 
        String CI_NUM = entity.getCI_NUM();
        if (CI_NUM != null) {
            stmt.bindString(6, CI_NUM);
        }
 
        String CI_IMPORTPRICE = entity.getCI_IMPORTPRICE();
        if (CI_IMPORTPRICE != null) {
            stmt.bindString(7, CI_IMPORTPRICE);
        }
 
        String CI_SALEPRICE = entity.getCI_SALEPRICE();
        if (CI_SALEPRICE != null) {
            stmt.bindString(8, CI_SALEPRICE);
        }
 
        String CI_MEMBERPRICE = entity.getCI_MEMBERPRICE();
        if (CI_MEMBERPRICE != null) {
            stmt.bindString(9, CI_MEMBERPRICE);
        }
 
        String CI_UNIT = entity.getCI_UNIT();
        if (CI_UNIT != null) {
            stmt.bindString(10, CI_UNIT);
        }
 
        String CI_VOLUM = entity.getCI_VOLUM();
        if (CI_VOLUM != null) {
            stmt.bindString(11, CI_VOLUM);
        }
 
        String CI_DISCOUNT = entity.getCI_DISCOUNT();
        if (CI_DISCOUNT != null) {
            stmt.bindString(12, CI_DISCOUNT);
        }
 
        String CI_REMARKS = entity.getCI_REMARKS();
        if (CI_REMARKS != null) {
            stmt.bindString(13, CI_REMARKS);
        }
        stmt.bindLong(14, entity.getCREATETIME());
        stmt.bindLong(15, entity.getUPDATETIME());
 
        String U_ID = entity.getU_ID();
        if (U_ID != null) {
            stmt.bindString(16, U_ID);
        }
 
        String USE_STATUS = entity.getUSE_STATUS();
        if (USE_STATUS != null) {
            stmt.bindString(17, USE_STATUS);
        }
 
        String CT_ID = entity.getCT_ID();
        if (CT_ID != null) {
            stmt.bindString(18, CT_ID);
        }
 
        String CI_SPELL = entity.getCI_SPELL();
        if (CI_SPELL != null) {
            stmt.bindString(19, CI_SPELL);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(20, CLIENT_CODE);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(21, STORE_CODE);
        }
 
        String CI_IMG = entity.getCI_IMG();
        if (CI_IMG != null) {
            stmt.bindString(22, CI_IMG);
        }
 
        String CI_IMPPRICE1 = entity.getCI_IMPPRICE1();
        if (CI_IMPPRICE1 != null) {
            stmt.bindString(23, CI_IMPPRICE1);
        }
 
        String CI_IMPPRICE2 = entity.getCI_IMPPRICE2();
        if (CI_IMPPRICE2 != null) {
            stmt.bindString(24, CI_IMPPRICE2);
        }
 
        String CI_IMPPRICE3 = entity.getCI_IMPPRICE3();
        if (CI_IMPPRICE3 != null) {
            stmt.bindString(25, CI_IMPPRICE3);
        }
 
        String CI_MINPRICE = entity.getCI_MINPRICE();
        if (CI_MINPRICE != null) {
            stmt.bindString(26, CI_MINPRICE);
        }
 
        String CI_CONENT = entity.getCI_CONENT();
        if (CI_CONENT != null) {
            stmt.bindString(27, CI_CONENT);
        }
 
        String UU_ID = entity.getUU_ID();
        if (UU_ID != null) {
            stmt.bindString(28, UU_ID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommodityRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCI_ID());
 
        String CI_NO = entity.getCI_NO();
        if (CI_NO != null) {
            stmt.bindString(2, CI_NO);
        }
 
        String CI_NAME = entity.getCI_NAME();
        if (CI_NAME != null) {
            stmt.bindString(3, CI_NAME);
        }
 
        String CI_NUMBER = entity.getCI_NUMBER();
        if (CI_NUMBER != null) {
            stmt.bindString(4, CI_NUMBER);
        }
 
        String CI_PRICE = entity.getCI_PRICE();
        if (CI_PRICE != null) {
            stmt.bindString(5, CI_PRICE);
        }
 
        String CI_NUM = entity.getCI_NUM();
        if (CI_NUM != null) {
            stmt.bindString(6, CI_NUM);
        }
 
        String CI_IMPORTPRICE = entity.getCI_IMPORTPRICE();
        if (CI_IMPORTPRICE != null) {
            stmt.bindString(7, CI_IMPORTPRICE);
        }
 
        String CI_SALEPRICE = entity.getCI_SALEPRICE();
        if (CI_SALEPRICE != null) {
            stmt.bindString(8, CI_SALEPRICE);
        }
 
        String CI_MEMBERPRICE = entity.getCI_MEMBERPRICE();
        if (CI_MEMBERPRICE != null) {
            stmt.bindString(9, CI_MEMBERPRICE);
        }
 
        String CI_UNIT = entity.getCI_UNIT();
        if (CI_UNIT != null) {
            stmt.bindString(10, CI_UNIT);
        }
 
        String CI_VOLUM = entity.getCI_VOLUM();
        if (CI_VOLUM != null) {
            stmt.bindString(11, CI_VOLUM);
        }
 
        String CI_DISCOUNT = entity.getCI_DISCOUNT();
        if (CI_DISCOUNT != null) {
            stmt.bindString(12, CI_DISCOUNT);
        }
 
        String CI_REMARKS = entity.getCI_REMARKS();
        if (CI_REMARKS != null) {
            stmt.bindString(13, CI_REMARKS);
        }
        stmt.bindLong(14, entity.getCREATETIME());
        stmt.bindLong(15, entity.getUPDATETIME());
 
        String U_ID = entity.getU_ID();
        if (U_ID != null) {
            stmt.bindString(16, U_ID);
        }
 
        String USE_STATUS = entity.getUSE_STATUS();
        if (USE_STATUS != null) {
            stmt.bindString(17, USE_STATUS);
        }
 
        String CT_ID = entity.getCT_ID();
        if (CT_ID != null) {
            stmt.bindString(18, CT_ID);
        }
 
        String CI_SPELL = entity.getCI_SPELL();
        if (CI_SPELL != null) {
            stmt.bindString(19, CI_SPELL);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(20, CLIENT_CODE);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(21, STORE_CODE);
        }
 
        String CI_IMG = entity.getCI_IMG();
        if (CI_IMG != null) {
            stmt.bindString(22, CI_IMG);
        }
 
        String CI_IMPPRICE1 = entity.getCI_IMPPRICE1();
        if (CI_IMPPRICE1 != null) {
            stmt.bindString(23, CI_IMPPRICE1);
        }
 
        String CI_IMPPRICE2 = entity.getCI_IMPPRICE2();
        if (CI_IMPPRICE2 != null) {
            stmt.bindString(24, CI_IMPPRICE2);
        }
 
        String CI_IMPPRICE3 = entity.getCI_IMPPRICE3();
        if (CI_IMPPRICE3 != null) {
            stmt.bindString(25, CI_IMPPRICE3);
        }
 
        String CI_MINPRICE = entity.getCI_MINPRICE();
        if (CI_MINPRICE != null) {
            stmt.bindString(26, CI_MINPRICE);
        }
 
        String CI_CONENT = entity.getCI_CONENT();
        if (CI_CONENT != null) {
            stmt.bindString(27, CI_CONENT);
        }
 
        String UU_ID = entity.getUU_ID();
        if (UU_ID != null) {
            stmt.bindString(28, UU_ID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CommodityRecord readEntity(Cursor cursor, int offset) {
        CommodityRecord entity = new CommodityRecord( //
            cursor.getLong(offset + 0), // CI_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CI_NO
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CI_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CI_NUMBER
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CI_PRICE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CI_NUM
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CI_IMPORTPRICE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CI_SALEPRICE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CI_MEMBERPRICE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CI_UNIT
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CI_VOLUM
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // CI_DISCOUNT
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // CI_REMARKS
            cursor.getLong(offset + 13), // CREATETIME
            cursor.getLong(offset + 14), // UPDATETIME
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // U_ID
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // USE_STATUS
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // CT_ID
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // CI_SPELL
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // CLIENT_CODE
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // STORE_CODE
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // CI_IMG
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // CI_IMPPRICE1
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // CI_IMPPRICE2
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // CI_IMPPRICE3
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // CI_MINPRICE
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // CI_CONENT
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // UU_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommodityRecord entity, int offset) {
        entity.setCI_ID(cursor.getLong(offset + 0));
        entity.setCI_NO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCI_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCI_NUMBER(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCI_PRICE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCI_NUM(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCI_IMPORTPRICE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCI_SALEPRICE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCI_MEMBERPRICE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCI_UNIT(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCI_VOLUM(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCI_DISCOUNT(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCI_REMARKS(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCREATETIME(cursor.getLong(offset + 13));
        entity.setUPDATETIME(cursor.getLong(offset + 14));
        entity.setU_ID(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUSE_STATUS(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCT_ID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCI_SPELL(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCLIENT_CODE(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSTORE_CODE(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCI_IMG(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCI_IMPPRICE1(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCI_IMPPRICE2(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCI_IMPPRICE3(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCI_MINPRICE(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCI_CONENT(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setUU_ID(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommodityRecord entity, long rowId) {
        entity.setCI_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommodityRecord entity) {
        if(entity != null) {
            return entity.getCI_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommodityRecord entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
