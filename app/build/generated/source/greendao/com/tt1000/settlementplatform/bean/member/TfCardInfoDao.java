package com.tt1000.settlementplatform.bean.member;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tf_cardinfo".
*/
public class TfCardInfoDao extends AbstractDao<TfCardInfo, String> {

    public static final String TABLENAME = "tf_cardinfo";

    /**
     * Properties of entity TfCardInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IC_ID = new Property(0, String.class, "IC_ID", true, "IC_ID");
        public final static Property CREATETIME = new Property(1, long.class, "CREATETIME", false, "CREATETIME");
        public final static Property UPDATETIME = new Property(2, long.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property IC_TYPE = new Property(3, String.class, "IC_TYPE", false, "IC_TYPE");
        public final static Property MI_ID = new Property(4, String.class, "MI_ID", false, "MI_ID");
        public final static Property IC_SERIAL_NUMBER = new Property(5, String.class, "IC_SERIAL_NUMBER", false, "IC_SERIAL_NUMBER");
        public final static Property U_ID = new Property(6, String.class, "U_ID", false, "U_ID");
        public final static Property IC_STATUS = new Property(7, String.class, "IC_STATUS", false, "IC_STATUS");
        public final static Property STORE_CODE = new Property(8, String.class, "STORE_CODE", false, "STORE_CODE");
        public final static Property CLIENT_CODE = new Property(9, String.class, "CLIENT_CODE", false, "CLIENT_CODE");
    }


    public TfCardInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TfCardInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tf_cardinfo\" (" + //
                "\"IC_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: IC_ID
                "\"CREATETIME\" INTEGER NOT NULL ," + // 1: CREATETIME
                "\"UPDATETIME\" INTEGER NOT NULL ," + // 2: UPDATETIME
                "\"IC_TYPE\" TEXT," + // 3: IC_TYPE
                "\"MI_ID\" TEXT," + // 4: MI_ID
                "\"IC_SERIAL_NUMBER\" TEXT," + // 5: IC_SERIAL_NUMBER
                "\"U_ID\" TEXT," + // 6: U_ID
                "\"IC_STATUS\" TEXT," + // 7: IC_STATUS
                "\"STORE_CODE\" TEXT," + // 8: STORE_CODE
                "\"CLIENT_CODE\" TEXT);"); // 9: CLIENT_CODE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tf_cardinfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TfCardInfo entity) {
        stmt.clearBindings();
 
        String IC_ID = entity.getIC_ID();
        if (IC_ID != null) {
            stmt.bindString(1, IC_ID);
        }
        stmt.bindLong(2, entity.getCREATETIME());
        stmt.bindLong(3, entity.getUPDATETIME());
 
        String IC_TYPE = entity.getIC_TYPE();
        if (IC_TYPE != null) {
            stmt.bindString(4, IC_TYPE);
        }
 
        String MI_ID = entity.getMI_ID();
        if (MI_ID != null) {
            stmt.bindString(5, MI_ID);
        }
 
        String IC_SERIAL_NUMBER = entity.getIC_SERIAL_NUMBER();
        if (IC_SERIAL_NUMBER != null) {
            stmt.bindString(6, IC_SERIAL_NUMBER);
        }
 
        String U_ID = entity.getU_ID();
        if (U_ID != null) {
            stmt.bindString(7, U_ID);
        }
 
        String IC_STATUS = entity.getIC_STATUS();
        if (IC_STATUS != null) {
            stmt.bindString(8, IC_STATUS);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(9, STORE_CODE);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(10, CLIENT_CODE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TfCardInfo entity) {
        stmt.clearBindings();
 
        String IC_ID = entity.getIC_ID();
        if (IC_ID != null) {
            stmt.bindString(1, IC_ID);
        }
        stmt.bindLong(2, entity.getCREATETIME());
        stmt.bindLong(3, entity.getUPDATETIME());
 
        String IC_TYPE = entity.getIC_TYPE();
        if (IC_TYPE != null) {
            stmt.bindString(4, IC_TYPE);
        }
 
        String MI_ID = entity.getMI_ID();
        if (MI_ID != null) {
            stmt.bindString(5, MI_ID);
        }
 
        String IC_SERIAL_NUMBER = entity.getIC_SERIAL_NUMBER();
        if (IC_SERIAL_NUMBER != null) {
            stmt.bindString(6, IC_SERIAL_NUMBER);
        }
 
        String U_ID = entity.getU_ID();
        if (U_ID != null) {
            stmt.bindString(7, U_ID);
        }
 
        String IC_STATUS = entity.getIC_STATUS();
        if (IC_STATUS != null) {
            stmt.bindString(8, IC_STATUS);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(9, STORE_CODE);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(10, CLIENT_CODE);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TfCardInfo readEntity(Cursor cursor, int offset) {
        TfCardInfo entity = new TfCardInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // IC_ID
            cursor.getLong(offset + 1), // CREATETIME
            cursor.getLong(offset + 2), // UPDATETIME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // IC_TYPE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MI_ID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // IC_SERIAL_NUMBER
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // U_ID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // IC_STATUS
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // STORE_CODE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // CLIENT_CODE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TfCardInfo entity, int offset) {
        entity.setIC_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCREATETIME(cursor.getLong(offset + 1));
        entity.setUPDATETIME(cursor.getLong(offset + 2));
        entity.setIC_TYPE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMI_ID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIC_SERIAL_NUMBER(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setU_ID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIC_STATUS(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSTORE_CODE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCLIENT_CODE(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TfCardInfo entity, long rowId) {
        return entity.getIC_ID();
    }
    
    @Override
    public String getKey(TfCardInfo entity) {
        if(entity != null) {
            return entity.getIC_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TfCardInfo entity) {
        return entity.getIC_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
