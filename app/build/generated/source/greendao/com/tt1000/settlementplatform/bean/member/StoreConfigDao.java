package com.tt1000.settlementplatform.bean.member;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORE_CONFIG".
*/
public class StoreConfigDao extends AbstractDao<StoreConfig, String> {

    public static final String TABLENAME = "STORE_CONFIG";

    /**
     * Properties of entity StoreConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SEQNO = new Property(0, String.class, "SEQNO", true, "SEQNO");
        public final static Property STORE_CODE = new Property(1, String.class, "STORE_CODE", false, "STORE_CODE");
        public final static Property CLIENT_CODE = new Property(2, String.class, "CLIENT_CODE", false, "CLIENT_CODE");
        public final static Property CLOUD = new Property(3, String.class, "CLOUD", false, "CLOUD");
        public final static Property STORE_TYPE = new Property(4, String.class, "STORE_TYPE", false, "STORE_TYPE");
        public final static Property CREATETIME = new Property(5, long.class, "CREATETIME", false, "CREATETIME");
        public final static Property UPDATETIME = new Property(6, long.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property ROUND = new Property(7, String.class, "ROUND", false, "ROUND");
        public final static Property SET_MEAL = new Property(8, String.class, "SET_MEAL", false, "SET_MEAL");
        public final static Property DISCOUNT = new Property(9, String.class, "DISCOUNT", false, "DISCOUNT");
        public final static Property LOGOUT = new Property(10, String.class, "LOGOUT", false, "LOGOUT");
        public final static Property OD_MONEY = new Property(11, String.class, "OD_MONEY", false, "OD_MONEY");
        public final static Property ONLINE_DISCOUNT = new Property(12, String.class, "ONLINE_DISCOUNT", false, "ONLINE_DISCOUNT");
        public final static Property INLINE_DISCOUNT = new Property(13, String.class, "INLINE_DISCOUNT", false, "INLINE_DISCOUNT");
        public final static Property TAKE_OUT_CHECK = new Property(14, String.class, "TAKE_OUT_CHECK", false, "TAKE_OUT_CHECK");
        public final static Property IS_MEMBER_JOIN = new Property(15, String.class, "IS_MEMBER_JOIN", false, "IS_MEMBER_JOIN");
        public final static Property CARD_COST = new Property(16, String.class, "CARD_COST", false, "CARD_COST");
        public final static Property SUBSIDY_JUDGE = new Property(17, String.class, "SUBSIDY_JUDGE", false, "SUBSIDY_JUDGE");
        public final static Property PRICING = new Property(18, String.class, "PRICING", false, "PRICING");
        public final static Property IS_OPEN_SCAN_DESK = new Property(19, String.class, "IS_OPEN_SCAN_DESK", false, "IS_OPEN_SCAN_DESK");
        public final static Property IS_AUTO_PRINT = new Property(20, String.class, "IS_AUTO_PRINT", false, "IS_AUTO_PRINT");
    }


    public StoreConfigDao(DaoConfig config) {
        super(config);
    }
    
    public StoreConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE_CONFIG\" (" + //
                "\"SEQNO\" TEXT PRIMARY KEY NOT NULL ," + // 0: SEQNO
                "\"STORE_CODE\" TEXT," + // 1: STORE_CODE
                "\"CLIENT_CODE\" TEXT," + // 2: CLIENT_CODE
                "\"CLOUD\" TEXT," + // 3: CLOUD
                "\"STORE_TYPE\" TEXT," + // 4: STORE_TYPE
                "\"CREATETIME\" INTEGER NOT NULL ," + // 5: CREATETIME
                "\"UPDATETIME\" INTEGER NOT NULL ," + // 6: UPDATETIME
                "\"ROUND\" TEXT," + // 7: ROUND
                "\"SET_MEAL\" TEXT," + // 8: SET_MEAL
                "\"DISCOUNT\" TEXT," + // 9: DISCOUNT
                "\"LOGOUT\" TEXT," + // 10: LOGOUT
                "\"OD_MONEY\" TEXT," + // 11: OD_MONEY
                "\"ONLINE_DISCOUNT\" TEXT," + // 12: ONLINE_DISCOUNT
                "\"INLINE_DISCOUNT\" TEXT," + // 13: INLINE_DISCOUNT
                "\"TAKE_OUT_CHECK\" TEXT," + // 14: TAKE_OUT_CHECK
                "\"IS_MEMBER_JOIN\" TEXT," + // 15: IS_MEMBER_JOIN
                "\"CARD_COST\" TEXT," + // 16: CARD_COST
                "\"SUBSIDY_JUDGE\" TEXT," + // 17: SUBSIDY_JUDGE
                "\"PRICING\" TEXT," + // 18: PRICING
                "\"IS_OPEN_SCAN_DESK\" TEXT," + // 19: IS_OPEN_SCAN_DESK
                "\"IS_AUTO_PRINT\" TEXT);"); // 20: IS_AUTO_PRINT
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE_CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StoreConfig entity) {
        stmt.clearBindings();
 
        String SEQNO = entity.getSEQNO();
        if (SEQNO != null) {
            stmt.bindString(1, SEQNO);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(2, STORE_CODE);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(3, CLIENT_CODE);
        }
 
        String CLOUD = entity.getCLOUD();
        if (CLOUD != null) {
            stmt.bindString(4, CLOUD);
        }
 
        String STORE_TYPE = entity.getSTORE_TYPE();
        if (STORE_TYPE != null) {
            stmt.bindString(5, STORE_TYPE);
        }
        stmt.bindLong(6, entity.getCREATETIME());
        stmt.bindLong(7, entity.getUPDATETIME());
 
        String ROUND = entity.getROUND();
        if (ROUND != null) {
            stmt.bindString(8, ROUND);
        }
 
        String SET_MEAL = entity.getSET_MEAL();
        if (SET_MEAL != null) {
            stmt.bindString(9, SET_MEAL);
        }
 
        String DISCOUNT = entity.getDISCOUNT();
        if (DISCOUNT != null) {
            stmt.bindString(10, DISCOUNT);
        }
 
        String LOGOUT = entity.getLOGOUT();
        if (LOGOUT != null) {
            stmt.bindString(11, LOGOUT);
        }
 
        String OD_MONEY = entity.getOD_MONEY();
        if (OD_MONEY != null) {
            stmt.bindString(12, OD_MONEY);
        }
 
        String ONLINE_DISCOUNT = entity.getONLINE_DISCOUNT();
        if (ONLINE_DISCOUNT != null) {
            stmt.bindString(13, ONLINE_DISCOUNT);
        }
 
        String INLINE_DISCOUNT = entity.getINLINE_DISCOUNT();
        if (INLINE_DISCOUNT != null) {
            stmt.bindString(14, INLINE_DISCOUNT);
        }
 
        String TAKE_OUT_CHECK = entity.getTAKE_OUT_CHECK();
        if (TAKE_OUT_CHECK != null) {
            stmt.bindString(15, TAKE_OUT_CHECK);
        }
 
        String IS_MEMBER_JOIN = entity.getIS_MEMBER_JOIN();
        if (IS_MEMBER_JOIN != null) {
            stmt.bindString(16, IS_MEMBER_JOIN);
        }
 
        String CARD_COST = entity.getCARD_COST();
        if (CARD_COST != null) {
            stmt.bindString(17, CARD_COST);
        }
 
        String SUBSIDY_JUDGE = entity.getSUBSIDY_JUDGE();
        if (SUBSIDY_JUDGE != null) {
            stmt.bindString(18, SUBSIDY_JUDGE);
        }
 
        String PRICING = entity.getPRICING();
        if (PRICING != null) {
            stmt.bindString(19, PRICING);
        }
 
        String IS_OPEN_SCAN_DESK = entity.getIS_OPEN_SCAN_DESK();
        if (IS_OPEN_SCAN_DESK != null) {
            stmt.bindString(20, IS_OPEN_SCAN_DESK);
        }
 
        String IS_AUTO_PRINT = entity.getIS_AUTO_PRINT();
        if (IS_AUTO_PRINT != null) {
            stmt.bindString(21, IS_AUTO_PRINT);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StoreConfig entity) {
        stmt.clearBindings();
 
        String SEQNO = entity.getSEQNO();
        if (SEQNO != null) {
            stmt.bindString(1, SEQNO);
        }
 
        String STORE_CODE = entity.getSTORE_CODE();
        if (STORE_CODE != null) {
            stmt.bindString(2, STORE_CODE);
        }
 
        String CLIENT_CODE = entity.getCLIENT_CODE();
        if (CLIENT_CODE != null) {
            stmt.bindString(3, CLIENT_CODE);
        }
 
        String CLOUD = entity.getCLOUD();
        if (CLOUD != null) {
            stmt.bindString(4, CLOUD);
        }
 
        String STORE_TYPE = entity.getSTORE_TYPE();
        if (STORE_TYPE != null) {
            stmt.bindString(5, STORE_TYPE);
        }
        stmt.bindLong(6, entity.getCREATETIME());
        stmt.bindLong(7, entity.getUPDATETIME());
 
        String ROUND = entity.getROUND();
        if (ROUND != null) {
            stmt.bindString(8, ROUND);
        }
 
        String SET_MEAL = entity.getSET_MEAL();
        if (SET_MEAL != null) {
            stmt.bindString(9, SET_MEAL);
        }
 
        String DISCOUNT = entity.getDISCOUNT();
        if (DISCOUNT != null) {
            stmt.bindString(10, DISCOUNT);
        }
 
        String LOGOUT = entity.getLOGOUT();
        if (LOGOUT != null) {
            stmt.bindString(11, LOGOUT);
        }
 
        String OD_MONEY = entity.getOD_MONEY();
        if (OD_MONEY != null) {
            stmt.bindString(12, OD_MONEY);
        }
 
        String ONLINE_DISCOUNT = entity.getONLINE_DISCOUNT();
        if (ONLINE_DISCOUNT != null) {
            stmt.bindString(13, ONLINE_DISCOUNT);
        }
 
        String INLINE_DISCOUNT = entity.getINLINE_DISCOUNT();
        if (INLINE_DISCOUNT != null) {
            stmt.bindString(14, INLINE_DISCOUNT);
        }
 
        String TAKE_OUT_CHECK = entity.getTAKE_OUT_CHECK();
        if (TAKE_OUT_CHECK != null) {
            stmt.bindString(15, TAKE_OUT_CHECK);
        }
 
        String IS_MEMBER_JOIN = entity.getIS_MEMBER_JOIN();
        if (IS_MEMBER_JOIN != null) {
            stmt.bindString(16, IS_MEMBER_JOIN);
        }
 
        String CARD_COST = entity.getCARD_COST();
        if (CARD_COST != null) {
            stmt.bindString(17, CARD_COST);
        }
 
        String SUBSIDY_JUDGE = entity.getSUBSIDY_JUDGE();
        if (SUBSIDY_JUDGE != null) {
            stmt.bindString(18, SUBSIDY_JUDGE);
        }
 
        String PRICING = entity.getPRICING();
        if (PRICING != null) {
            stmt.bindString(19, PRICING);
        }
 
        String IS_OPEN_SCAN_DESK = entity.getIS_OPEN_SCAN_DESK();
        if (IS_OPEN_SCAN_DESK != null) {
            stmt.bindString(20, IS_OPEN_SCAN_DESK);
        }
 
        String IS_AUTO_PRINT = entity.getIS_AUTO_PRINT();
        if (IS_AUTO_PRINT != null) {
            stmt.bindString(21, IS_AUTO_PRINT);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public StoreConfig readEntity(Cursor cursor, int offset) {
        StoreConfig entity = new StoreConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // SEQNO
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // STORE_CODE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CLIENT_CODE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CLOUD
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // STORE_TYPE
            cursor.getLong(offset + 5), // CREATETIME
            cursor.getLong(offset + 6), // UPDATETIME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ROUND
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SET_MEAL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // DISCOUNT
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // LOGOUT
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // OD_MONEY
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ONLINE_DISCOUNT
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // INLINE_DISCOUNT
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // TAKE_OUT_CHECK
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // IS_MEMBER_JOIN
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CARD_COST
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // SUBSIDY_JUDGE
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // PRICING
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // IS_OPEN_SCAN_DESK
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // IS_AUTO_PRINT
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StoreConfig entity, int offset) {
        entity.setSEQNO(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSTORE_CODE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCLIENT_CODE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCLOUD(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSTORE_TYPE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCREATETIME(cursor.getLong(offset + 5));
        entity.setUPDATETIME(cursor.getLong(offset + 6));
        entity.setROUND(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSET_MEAL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDISCOUNT(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLOGOUT(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOD_MONEY(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setONLINE_DISCOUNT(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setINLINE_DISCOUNT(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTAKE_OUT_CHECK(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIS_MEMBER_JOIN(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCARD_COST(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSUBSIDY_JUDGE(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPRICING(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIS_OPEN_SCAN_DESK(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIS_AUTO_PRINT(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final String updateKeyAfterInsert(StoreConfig entity, long rowId) {
        return entity.getSEQNO();
    }
    
    @Override
    public String getKey(StoreConfig entity) {
        if(entity != null) {
            return entity.getSEQNO();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StoreConfig entity) {
        return entity.getSEQNO() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
